from __future__ import annotations

from typing import (
    Callable,
    overload,
    Literal,
)

import numpy as np

from ._ufuncs import psi
from numpy import sinc as sinc

from numpy.typing import ArrayLike, NDArray

_IntegerType = int | np.integer
_FloatingType = float | np.floating
_ComplexNumber = complex | _FloatingType | _IntegerType

_PointsAndDerivatives = tuple[NDArray, NDArray]
_ZerosOrder = tuple[NDArray, NDArray, NDArray, NDArray]

__all__ = [
    "ai_zeros",
    "assoc_laguerre",
    "bei_zeros",
    "beip_zeros",
    "ber_zeros",
    "bernoulli",
    "berp_zeros",
    "bi_zeros",
    "clpmn",
    "comb",
    "digamma",
    "diric",
    "erf_zeros",
    "euler",
    "factorial",
    "factorial2",
    "factorialk",
    "fresnel_zeros",
    "fresnelc_zeros",
    "fresnels_zeros",
    "h1vp",
    "h2vp",
    "ivp",
    "jn_zeros",
    "jnjnp_zeros",
    "jnp_zeros",
    "jnyn_zeros",
    "jvp",
    "kei_zeros",
    "keip_zeros",
    "kelvin_zeros",
    "ker_zeros",
    "kerp_zeros",
    "kvp",
    "lmbda",
    "lpmn",
    "lpn",
    "lqmn",
    "lqn",
    "mathieu_even_coef",
    "mathieu_odd_coef",
    "obl_cv_seq",
    "pbdn_seq",
    "pbdv_seq",
    "pbvv_seq",
    "perm",
    "polygamma",
    "pro_cv_seq",
    "riccati_jn",
    "riccati_yn",
    "sinc",
    "stirling2",
    "y0_zeros",
    "y1_zeros",
    "y1p_zeros",
    "yn_zeros",
    "ynp_zeros",
    "yvp",
    "zeta",
]

_FACTORIALK_LIMITS_64BITS: dict[int, int]
_FACTORIALK_LIMITS_32BITS: dict[int, int]

digamma = psi

def diric(x: ArrayLike, n: ArrayLike) -> NDArray: ...
def jnjnp_zeros(nt: int) -> _ZerosOrder: ...
def jnyn_zeros(n: int, nt: int) -> _ZerosOrder: ...
def jn_zeros(n: int, nt: int) -> NDArray: ...
def jnp_zeros(n: int, nt: int) -> NDArray: ...
def yn_zeros(n: int, nt: int) -> NDArray: ...
def ynp_zeros(n: int, nt: int) -> NDArray: ...
def y0_zeros(nt: int, complex: bool = ...) -> _PointsAndDerivatives: ...
def y1_zeros(nt: int, complex: bool = ...) -> _PointsAndDerivatives: ...
def y1p_zeros(nt: int, complex: bool = ...) -> _PointsAndDerivatives: ...
@overload
def jvp(v: ArrayLike, z: _ComplexNumber | ArrayLike, n: int = ...) -> NDArray: ...
@overload
def jvp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> float: ...
@overload
def yvp(v: ArrayLike, z: ArrayLike, n: int = ...) -> NDArray: ...
@overload
def yvp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> float: ...
@overload
def kvp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> float: ...
@overload
def kvp(v: ArrayLike, z: ArrayLike, n: int = ...) -> NDArray: ...
@overload
def ivp(v: ArrayLike, z: ArrayLike, n: int = ...) -> NDArray: ...
@overload
def ivp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> float: ...
@overload
def h1vp(v: ArrayLike, z: ArrayLike, n: int = ...) -> NDArray: ...
@overload
def h1vp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> complex: ...
@overload
def h2vp(v: ArrayLike, z: ArrayLike, n: int = ...) -> NDArray: ...
@overload
def h2vp(v: _FloatingType, z: _ComplexNumber, n: int = ...) -> complex: ...
def riccati_jn(n: int, x: _FloatingType) -> _PointsAndDerivatives: ...
def riccati_yn(n: int, x: _FloatingType) -> _PointsAndDerivatives: ...
def erf_zeros(nt: int) -> NDArray: ...
def fresnelc_zeros(nt: int) -> NDArray: ...
def fresnels_zeros(nt: int) -> NDArray: ...
def fresnel_zeros(nt: int) -> _PointsAndDerivatives: ...
@overload
def assoc_laguerre(x: ArrayLike, n: int, k: _FloatingType = ...) -> NDArray: ...
@overload
def assoc_laguerre(x: _FloatingType, n: int, k: _FloatingType = ...) -> float: ...
def polygamma(n: ArrayLike, x: ArrayLike) -> NDArray: ...
def mathieu_even_coef(m: int, q: _FloatingType) -> NDArray: ...
def mathieu_odd_coef(m: int, q: _FloatingType) -> NDArray: ...
def lpmn(m: _IntegerType, n: _IntegerType, z: ArrayLike) -> _PointsAndDerivatives: ...
def clpmn(
    m: _FloatingType, n: _FloatingType, z: ArrayLike, type: Literal[2, 3] = ...
) -> _PointsAndDerivatives: ...
def lqmn(m: _IntegerType, n: _IntegerType, z: ArrayLike) -> _PointsAndDerivatives: ...
def bernoulli(n: int) -> NDArray: ...
def euler(n: int) -> NDArray: ...
def lpn(n: int, z: _FloatingType) -> _PointsAndDerivatives: ...
def lqn(n: int, z: _FloatingType) -> _PointsAndDerivatives: ...
def ai_zeros(nt: int) -> _ZerosOrder: ...
def bi_zeros(nt: int) -> _ZerosOrder: ...
def lmbda(v: int, x: int) -> _PointsAndDerivatives: ...
def pbdv_seq(v: _FloatingType, x: _FloatingType) -> _PointsAndDerivatives: ...
def pbvv_seq(v: _FloatingType, x: _FloatingType) -> _PointsAndDerivatives: ...
def pbdn_seq(n: int, z: _ComplexNumber) -> _PointsAndDerivatives: ...
def ber_zeros(nt: _IntegerType) -> NDArray: ...
def bei_zeros(nt: _IntegerType) -> NDArray: ...
def ker_zeros(nt: _IntegerType) -> NDArray: ...
def kei_zeros(nt: _IntegerType) -> NDArray: ...
def berp_zeros(nt: _IntegerType) -> NDArray: ...
def beip_zeros(nt: _IntegerType) -> NDArray: ...
def kerp_zeros(nt: _IntegerType) -> NDArray: ...
def keip_zeros(nt: _IntegerType) -> NDArray: ...
def kelvin_zeros(
    nt: _IntegerType,
) -> tuple[
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
    NDArray,
]: ...
def pro_cv_seq(m: _IntegerType, n: _IntegerType, c: _FloatingType) -> NDArray: ...
def obl_cv_seq(m: _IntegerType, n: _IntegerType, c: _FloatingType) -> NDArray: ...
@overload
def comb(
    N: ArrayLike,
    k: ArrayLike,
    *,
    exact: bool = ...,
    repetition: bool = ...,
) -> NDArray: ...
@overload
def comb(
    N: _IntegerType,
    k: _IntegerType,
    *,
    exact: Literal[True] = ...,
    repetition: bool = ...,
) -> _IntegerType: ...
def comb(
    N: _IntegerType,
    k: _IntegerType,
    *,
    exact: Literal[False] = ...,
    repetition: bool = ...,
) -> _FloatingType: ...
@overload
def perm(N: _IntegerType, k: _IntegerType, exact: bool = ...) -> _IntegerType: ...
@overload
def perm(N: ArrayLike, k: ArrayLike, exact: bool = ...) -> NDArray: ...
@overload
def factorial(n: ArrayLike, exact: bool = ...) -> NDArray: ...
@overload
def factorial(n: _IntegerType, exact: bool = ...) -> _FloatingType: ...
@overload
def factorial2(n: ArrayLike, exact: bool = ...) -> NDArray: ...
@overload
def factorial2(n: _IntegerType, exact: Literal[True]) -> int: ...
@overload
def factorial2(n: _IntegerType, exact: bool = ...) -> NDArray: ...
@overload
def factorialk(n: _IntegerType, k: _IntegerType, exact: bool | None = ...) -> _IntegerType: ...
@overload
def factorialk(n: ArrayLike, k: _IntegerType, exact: bool | None = ...) -> NDArray: ...
@overload
def stirling2(N: ArrayLike, K: ArrayLike, *, exact: bool = ...) -> NDArray: ...
@overload
def stirling2(N: _IntegerType, K: _IntegerType, *, exact: bool = ...) -> _FloatingType: ...
@overload
def zeta(
    x: _FloatingType, q: _FloatingType | None = ..., out: None = ...
) -> _FloatingType: ...
@overload
def zeta(x: ArrayLike, q: ArrayLike, out: None | NDArray = ...) -> NDArray: ...

# Those are private methods
def _sph_harm_all(m: _IntegerType, n: _IntegerType, theta: ArrayLike, phi: ArrayLike) -> NDArray: ...
def _factorialx_approx_core(n: ArrayLike, k: int) -> NDArray: ...
def _factorialx_array_approx(n: ArrayLike, k: int) -> NDArray: ...
def _factorialx_array_exact(n: ArrayLike, k: int = ...) -> NDArray: ...
def _range_prod(lo: _IntegerType, hi: _IntegerType, k: _IntegerType = ...) -> _IntegerType: ...
def _nonneg_int_or_fail(n: _IntegerType, var_name: str, strict: bool = ...) -> int: ...
@overload
def _bessel_diff_formula(
    v: ArrayLike,
    z: ArrayLike,
    n: int,
    L: Callable[[ArrayLike, ArrayLike], ArrayLike],
    phase: int,
) -> NDArray: ...
